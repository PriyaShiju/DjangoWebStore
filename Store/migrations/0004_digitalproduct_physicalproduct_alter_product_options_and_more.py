# Generated by Django 4.2.1 on 2023-05-25 06:58

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    dependencies = [
        ('Store', '0003_productcategory'),
    ]

    operations = [
        migrations.CreateModel(
            name='DigitalProduct',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Store.product')),
                ('file', models.FileField(upload_to='')),
            ],
            bases=('Store.product',),
            managers=[
                ('in_stock', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PhysicalProduct',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Store.product')),
                ('stock_count', models.IntegerField(help_text='How many items are currently in the stock')),
            ],
            bases=('Store.product',),
            managers=[
                ('in_stock', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelOptions(
            name='product',
            options={'ordering': ['price']},
        ),
        migrations.AlterModelOptions(
            name='productcategory',
            options={'ordering': ['categoryName'], 'verbose_name': 'Category', 'verbose_name_plural': 'Categories'},
        ),
        migrations.AlterModelManagers(
            name='product',
            managers=[
                ('in_stock', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='slug',
            field=models.SlugField(default='slugfield'),
        ),
        migrations.AlterField(
            model_name='productcategory',
            name='product',
            field=models.ManyToManyField(related_name='categories', to='Store.product'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(check=models.Q(('price__gte', 0)), name='price not negative'),
        ),
    ]
